# Claude Code 設定ファイル

# 基本設定
export CLAUDE_PROJECT_CONFIG="$HOME/.config/claude"

# Claude Code エイリアス
alias c='claude'
alias cedit='claude edit'
alias cask='claude ask'
alias cchat='claude chat'
alias ccode='claude code'
alias ctest='claude test'
alias cfix='claude fix'
alias cexplain='claude explain'
alias coptimize='claude optimize'

# 開発関連の便利エイリアス
alias cdebug='claude ask "このコードのデバッグを手伝って"'
alias crefactor='claude ask "このコードをリファクタリングして"'
alias ccomment='claude ask "このコードにコメントを追加して"'
alias cdoc='claude ask "このコードのドキュメントを生成して"'

# Git統合エイリアス
alias ccommit='claude ask "適切なコミットメッセージを生成して" $(git diff --cached)'
alias creview='claude ask "このコミットをレビューして" $(git diff --cached)'
alias cgit='claude ask "このGit状態を説明して" $(git status --porcelain)'

# プロジェクト関連
alias cinit='claude ask "このプロジェクトの構造を分析して初期設定を提案して"'
alias csetup='claude ask "このプロジェクトのセットアップ手順を教えて"'
alias ctest-help='claude ask "このプロジェクトのテスト戦略を提案して"'

# コード品質関連
alias clint='claude ask "このコードのリンター設定を提案して"'
alias csecurity='claude ask "このコードのセキュリティ問題をチェックして"'
alias cperformance='claude ask "このコードのパフォーマンスを改善して"'

# 学習・理解関連
alias clearn='claude ask "このコードの動作を詳しく説明して"'
alias cpattern='claude ask "このコードのデザインパターンを説明して"'
alias cbest='claude ask "このコードのベストプラクティスを教えて"'

# ファイル操作関連の便利関数

# 選択したファイルをClaude Codeで分析
cfile() {
    if [ -z "$1" ]; then
        echo "使用方法: cfile <ファイルパス> [質問]"
        return 1
    fi
    
    local file="$1"
    local question="${2:-このファイルを分析して}"
    
    if [ ! -f "$file" ]; then
        echo "エラー: ファイル '$file' が見つかりません"
        return 1
    fi
    
    claude ask "$question" "$file"
}

# 複数ファイルを一度にClaude Codeで分析
cfiles() {
    if [ $# -eq 0 ]; then
        echo "使用方法: cfiles <ファイル1> <ファイル2> ... [質問]"
        return 1
    fi
    
    local files=()
    local question="これらのファイルを分析して"
    
    # 引数を解析（最後の引数が質問の場合）
    for arg in "$@"; do
        if [ -f "$arg" ]; then
            files+=("$arg")
        else
            question="$arg"
        fi
    done
    
    if [ ${#files[@]} -eq 0 ]; then
        echo "エラー: 有効なファイルが見つかりません"
        return 1
    fi
    
    claude ask "$question" "${files[@]}"
}

# プロジェクト全体をClaude Codeで分析
cproject() {
    local question="${1:-このプロジェクトの構造と主要な機能を分析して}"
    
    # 主要なファイルを自動検出
    local main_files=()
    
    # よく使われる設定ファイル
    for file in package.json Cargo.toml go.mod requirements.txt Gemfile pom.xml build.gradle; do
        [ -f "$file" ] && main_files+=("$file")
    done
    
    # READMEファイル
    for file in README.md README.rst README.txt readme.md; do
        [ -f "$file" ] && main_files+=("$file")
    done
    
    # メインのソースファイル
    for file in main.py main.go main.js index.js app.py server.py; do
        [ -f "$file" ] && main_files+=("$file")
    done
    
    if [ ${#main_files[@]} -eq 0 ]; then
        echo "メインファイルが見つかりませんでした。手動でファイルを指定してください。"
        return 1
    fi
    
    echo "分析対象ファイル: ${main_files[*]}"
    claude ask "$question" "${main_files[@]}"
}

# エラーログをClaude Codeで分析
cerror() {
    if [ -z "$1" ]; then
        echo "使用方法: cerror <エラーメッセージまたはログファイル>"
        return 1
    fi
    
    if [ -f "$1" ]; then
        claude ask "このエラーログを分析して解決方法を提案して" "$1"
    else
        claude ask "このエラーメッセージを分析して解決方法を提案して: $1"
    fi
}

# 現在のディレクトリの構造をClaude Codeで分析
cdir() {
    local question="${1:-このディレクトリ構造を分析して}"
    local tree_output=$(tree -a -I '.git|node_modules|.DS_Store|*.pyc|__pycache__' -L 3 2>/dev/null || find . -type f -not -path './.git/*' -not -path './node_modules/*' | head -20)
    
    claude ask "$question ディレクトリ構造: $tree_output"
}

# Gitのdiffをクロード審査
cdiff() {
    local diff_type="${1:-staged}"
    local question="${2:-この変更をレビューして改善点を提案して}"
    
    case "$diff_type" in
        "staged"|"s")
            local diff_output=$(git diff --cached)
            ;;
        "unstaged"|"u")
            local diff_output=$(git diff)
            ;;
        "last"|"l")
            local diff_output=$(git show)
            ;;
        *)
            local diff_output=$(git diff "$diff_type")
            ;;
    esac
    
    if [ -z "$diff_output" ]; then
        echo "差分が見つかりません"
        return 1
    fi
    
    claude ask "$question" <<< "$diff_output"
}

# Claude Codeのヘルプ関数
chelp() {
    echo "Claude Code 便利コマンド:"
    echo ""
    echo "基本コマンド:"
    echo "  c, claude      - Claude Codeを起動"
    echo "  cedit          - ファイルを編集"
    echo "  cask           - 質問する"
    echo "  cchat          - チャットモード"
    echo ""
    echo "ファイル操作:"
    echo "  cfile <file>   - ファイルを分析"
    echo "  cfiles <files> - 複数ファイルを分析"
    echo "  cproject       - プロジェクト全体を分析"
    echo "  cdir           - ディレクトリ構造を分析"
    echo ""
    echo "Git統合:"
    echo "  ccommit        - コミットメッセージを生成"
    echo "  creview        - コミットをレビュー"
    echo "  cdiff [type]   - 差分をレビュー"
    echo ""
    echo "開発支援:"
    echo "  cdebug         - デバッグ支援"
    echo "  crefactor      - リファクタリング支援"
    echo "  cerror <error> - エラー解決支援"
    echo "  ctest-help     - テスト戦略提案"
    echo ""
    echo "詳細: claude --help"
}

# Claude Codeのバージョンとステータス確認
cstatus() {
    echo "=== Claude Code Status ==="
    echo "Version: $(claude --version 2>/dev/null || echo 'Not found')"
    echo "Config: $CLAUDE_PROJECT_CONFIG"
    echo "Available commands: $(compgen -a | grep '^c' | wc -l) aliases"
    echo "=========================="
} 